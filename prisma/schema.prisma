datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums
enum UserRole {
  SYSTEM_ADMIN
  COLLECTOR
  MANAGER
  HOSPITAL_REPRESENTATIVE
  STORE_MANAGER
  LABORATORY
}

enum BloodType {
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
  O_POS
  O_NEG
}

enum StorageStatus {
  AVAILABLE
  RESERVED
  USED
  EXPIRED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}
enum IntegrationStatus {
  PENDING
  APPROVED
  REJECTED
}

// Models
model Hospital {
  id              Int              @id @default(autoincrement())
  name            String
  address         String
  username        String
  email           String
  password        String
  integrations    Integration[]
  notifications   Notification[]
  orders          Order[]
  bloodInventory  BloodInventory[]
  accounts Account[] 
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Donor {
  id              Int             @id @default(autoincrement())
  firstName       String
  middleName      String?
  lastName        String
  title           String?
  birthDate       DateTime
  age             Int
  gender          String
  occupation      String?
  city            String
  subCity         String
  zone            String
  woreda          String
  kebele          String
  email           String          @unique
  telephone       String?
  cellPhone       String?
  organization    String?
  username        String
  password        String
  medicalHistory  String?
  qualifications  Qualification[] @relation("DonorQualification")
  notifications   Notification[]
  appointments    Appointment[]
  bloodInventory  BloodInventory[]
  accounts  Account[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model User {
  id            Int             @id @default(autoincrement())
  name          String
  email         String          @unique
  role          UserRole
  password      String
  username      String
  refreshToken  String?
  reports       Report[]
  collections   BloodInventory[]
  notifications Notification[]
  integrationsHandled Integration[] @relation("UserHandledIntegrations") // Links to integrations
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Integration {
  id            Int              @id @default(autoincrement())
  hospitalId    Int
  hospital      Hospital         @relation(fields: [hospitalId], references: [id])
  status        IntegrationStatus @default(PENDING)
  managerId     Int?             // References the User ID of the manager
  manager       User?            @relation("UserHandledIntegrations", fields: [managerId], references: [id]) // Opposite side of the relation
  managerComment String?         // Optional comment from the manager
  bloodInventories BloodInventory[] @relation("IntegrationBloodInventory")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Account {
  id            Int      @id @default(autoincrement())
  userId        Int
  accountType   String
  accountStatus String   @default("active") // Default to 'active'
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
   donorId    Int?     
  donor         Donor?   @relation(fields: [userId], references: [id]) // Relation with Donor
  hospitalId    Int?     // Add hospitalId to define the relationship
  hospital      Hospital?@relation(fields: [hospitalId], references: [id]) // Relation with Hospital

  // Activation and Deactivation Logic:
  isActive      Boolean  @default(true) // Account is active by default
  activationDate DateTime? // Optional date when the account was activated
  deactivationDate DateTime? // Optional date when the account was deactivated
}



model BloodInventory {
  id              Int           @id @default(autoincrement())
  bloodType       BloodType
  quantity        Int
  barcode         String        @unique
  donationDate    DateTime
  expirationDate  DateTime
  storageStatus   StorageStatus @default(AVAILABLE)
  donorId         Int
  donor           Donor         @relation(fields: [donorId], references: [id])
  hospitalId      Int?
  hospital        Hospital?     @relation(fields: [hospitalId], references: [id])
  collectorId     Int?
  collector       User?         @relation(fields: [collectorId], references: [id])
  integrationId   Int?
  integration     Integration?     @relation("IntegrationBloodInventory", fields: [integrationId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Appointment {
  id              Int       @id @default(autoincrement())
  appointmentDate DateTime
  status          String
  donorId         Int
  donor           Donor     @relation(fields: [donorId], references: [id])
}

model Qualification {
  id                    Int       @id @default(autoincrement())
  donorId               Int       // Foreign key to Donor
  donor                 Donor     @relation("DonorQualification", fields: [donorId], references: [id])
  weight                Float
  pulse                 Int
  hb                    Float
  bp                    String
  temperature           Float
  lastDonationDate      DateTime?
  hasDonatedBefore      Boolean
  hasTattooing          Boolean
  hasEarPiercing        Boolean
  hadDentalExtraction   Boolean
  hasHeartDisease       Boolean
  hasCancer             Boolean
  hasDiabetes           Boolean
  hasHepatitis          Boolean
  hasSTD                Boolean
  hadTyphoidLastYear    Boolean
  hasLungDisease        Boolean
  hasTuberculosis       Boolean
  hasAllergies          Boolean
  hasKidneyDisease      Boolean
  hasEpilepsy           Boolean
  hasAbnormalBleeding   Boolean
  hadJaundiceLastYear   Boolean
  hadMalariaSixMonths   Boolean
  hasFaintingSpells     Boolean
  takenAntibiotics      Boolean
  takenSteroids         Boolean
  takenAspirin          Boolean
  hadVaccinations       Boolean
  consumedAlcohol       Boolean
  hadDogBiteVaccine     Boolean
  hadSurgeryLastSixMonths Boolean
  hadBloodTransfusionLastSixMonths Boolean
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}



model Notification {
  id          Int         @id @default(autoincrement())
  content     String
  sendDate    DateTime     @default(now())
  donorId     Int?
  donor       Donor?       @relation(fields: [donorId], references: [id])
  hospitalId  Int?
  hospital    Hospital?    @relation(fields: [hospitalId], references: [id])
  userId      Int?
  user        User?        @relation(fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Order {
  id          Int          @id @default(autoincrement())
  orderDate   DateTime
  bloodType   BloodType
  quantity    Int
  status      OrderStatus
  hospitalId  Int
  hospital    Hospital      @relation(fields: [hospitalId], references: [id])
}

model Report {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  generatedBy Int
  user        User      @relation(fields: [generatedBy], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}