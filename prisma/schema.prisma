// Define the database connection
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum for user roles
enum UserRole {
  SYSTEM_ADMIN
  COLLECTOR
  MANAGER
  STORE_MANAGER
  LABORATORY
}

// The main Donor model
model Donor {
  id             Int            @id @default(autoincrement())
  firstName      String
  middleName     String?
  lastName       String
  title          String?
  birthDate      DateTime
  age            Int
  gender         String
  occupation     String?
  city           String
  subCity        String
  zone           String
  woreda         String
  kebele         String
  telephone      String?
  cellPhone      String?
  organization   String?
  email          String         @unique
  password       String
  username       String         @unique
  poBox          String?
  bloodType      String
  medicalHistory String?

  collectorId    Int?
  collector      User?    @relation("CollectorDonors", fields: [collectorId], references: [id])

  systemAdminId  Int?
  systemAdmin    User?    @relation("AdminDonors", fields: [systemAdminId], references: [id])

  notifications  Notification[]
  appointments   Appointment[]
  donations      Donation[]
   Account       Account[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

// The User model
model User {
  id             Int           @id @default(autoincrement())
  name           String
  email          String        @unique
  role           UserRole
  password       String
 reports     Report[] 
  collectedDonors Donor[]      @relation("CollectorDonors")
  adminDonors    Donor[]       @relation("AdminDonors")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

// The Appointment model
model Appointment {
  id              Int       @id @default(autoincrement())
  appointmentDate DateTime
  status          String
  donorId         Int
  donor           Donor     @relation(fields: [donorId], references: [id])
}

// The Order model
model Order {
  id          Int       @id @default(autoincrement())
  orderDate   DateTime
  bloodType   String
  quantity    Int
  status      String
  hospitalId  Int
  hospital    Hospital   @relation(fields: [hospitalId], references: [id])
}

// The Hospital model
model Hospital {
  id            Int           @id @default(autoincrement())
  name          String
  address       String
  contactInfo   String
  email         String        @unique
  username      String
  password      String
  integrations  Integration[]
  notifications Notification[]
  orders        Order[]
}

// Inventory model with a relation to Integration
model Inventory {
  id              Int          @id @default(autoincrement())
  name            String
  bloodType       String
  expirationDate  DateTime
  totalQuantity   Int          // Total quantity of this blood type
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  integrationId   Int?
  integration     Integration? @relation(fields: [integrationId], references: [id]) // Add the inverse relation field here

  bloodId         Int          // Foreign key to Blood
  blood           Blood        @relation(fields: [bloodId], references: [id]) // Relation to Blood
}

// Integration model with a relation to Inventory
model Integration {
  id            Int         @id @default(autoincrement())
  hospitalId    Int
  hospital      Hospital    @relation(fields: [hospitalId], references: [id])
  inventories   Inventory[] // One-to-many relation to Inventory
}

// Blood model
model Blood {
  id            Int           @id @default(autoincrement())
  bloodType     String
  quantity      Int
  donationDate  DateTime
  inventory     Inventory[]
  collections   Collection[]
  donations     Donation[]
}

// Donation model
model Donation {
  id            Int       @id @default(autoincrement())
  donorId       Int
  bloodId       Int
  donationDate  DateTime
  donor         Donor     @relation(fields: [donorId], references: [id])
  blood         Blood     @relation(fields: [bloodId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Collection model
model Collection {
  id              Int       @id @default(autoincrement())
  collectedDate   DateTime
  bloodId         Int
  blood           Blood     @relation(fields: [bloodId], references: [id])
}

// SystemAdmin Model
model SystemAdmin {
  id          Int          @id @default(autoincrement())
  username    String
  accounts    Account[]    @relation("UserAccounts") // One-to-many relationship with Account
  notifications Notification[] // Optional one-to-many relationship with Notification (correcting this issue)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}


// Account Model
model Account {
  id            Int         @id @default(autoincrement())
  accountType   String
  accountStatus String
  userId        Int
  user          SystemAdmin @relation("UserAccounts", fields: [userId], references: [id]) // One-to-one relation with SystemAdmin
  Donor           Donor[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Notification Model
model Notification {
  id          Int         @id @default(autoincrement())
  content     String      // Content of the notification
  sendDate    DateTime    @default(now()) // Timestamp when the notification was sent
  hospitalId  Int?        // Optional relation to Hospital
  donorId     Int?        // Optional relation to Donor
  adminId     Int?        // Optional relation to SystemAdmin
  hospital    Hospital?   @relation(fields: [hospitalId], references: [id]) // Optional relation with Hospital
  donor       Donor?      @relation(fields: [donorId], references: [id]) // Optional relation with Donor
  systemAdmin SystemAdmin? @relation(fields: [adminId], references: [id]) // Optional relation with SystemAdmin

  createdAt   DateTime    @default(now()) // Timestamp for creation
  updatedAt   DateTime    @updatedAt // Timestamp for last update
}

model Report {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  generatedBy Int       // Foreign key to User model
  user        User      @relation(fields: [generatedBy], references: [id]) // Relation to the User who generated the report

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}






