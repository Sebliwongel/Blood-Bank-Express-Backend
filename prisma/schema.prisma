datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums
enum UserRole {
  SYSTEM_ADMIN
  COLLECTOR
  MANAGER
  STORE_MANAGER
  LABORATORY
}

enum BloodType {
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
  O_POS
  O_NEG
}

enum StorageStatus {
  AVAILABLE
  RESERVED
  USED
  EXPIRED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

model Hospital {
  id              Int              @id @default(autoincrement())
  name            String
  address         Address?         @relation("HospitalAddress", fields: [addressId], references: [id])
  addressId       Int?             @unique // Add @unique for one-to-one relation
  contactInfo     ContactInfo?     @relation("HospitalContactInfo", fields: [contactInfoId], references: [id])
  contactInfoId   Int?             @unique // Ensure this field is unique for one-to-one relation
  username        String
  password        String
  integrations    Integration[]
  notifications   Notification[]
  orders          Order[]
  bloodInventory  BloodInventory[]
  isActive        Boolean          @default(true)
  deactivatedAt   DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Address {
  id         Int       @id @default(autoincrement())
  city       String
  subCity    String
  zone       String
  woreda     String
  kebele     String
  poBox      String?
  donor      Donor?    @relation("DonorAddress")
  hospital   Hospital? @relation("HospitalAddress")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model ContactInfo {
  id         Int       @id @default(autoincrement())
  telephone  String?
  cellPhone  String?
  email      String    @unique
  donor      Donor?    @relation("DonorContactInfo")
  hospital   Hospital? @relation("HospitalContactInfo")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Donor {
  id              Int             @id @default(autoincrement())
  firstName       String
  middleName      String?
  lastName        String
  title           String?
  birthDate       DateTime
  age             Int
  gender          String
  occupation      String?
  addressId       Int             @unique // Add @unique for one-to-one relation
  address         Address         @relation("DonorAddress", fields: [addressId], references: [id])
  contactInfoId   Int             @unique
  contactInfo     ContactInfo     @relation("DonorContactInfo", fields: [contactInfoId], references: [id])
  organization    String?
  email           String
  password        String
  username        String
  medicalHistory  String?
  qualifications  Qualification[] @relation("DonorQualification")
  notifications   Notification[]
  appointments    Appointment[]
  bloodInventory  BloodInventory[]
  isActive        Boolean         @default(true)
  deactivatedAt   DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}




model User {
  id            Int             @id @default(autoincrement())
  name          String
  email         String          @unique
  role          UserRole
  password      String
  username      String
  refreshToken  String?
  isActive      Boolean         @default(true)
  deactivatedAt DateTime?
  reports       Report[]
  collections   BloodInventory[]
  notifications Notification[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

  

model BloodInventory {
  id              Int           @id @default(autoincrement())
  bloodType       BloodType
  quantity        Int
  donationDate    DateTime
  expirationDate  DateTime
  storageStatus   StorageStatus
  donorId         Int
  donor           Donor         @relation(fields: [donorId], references: [id])
  hospitalId      Int?
  hospital        Hospital?     @relation(fields: [hospitalId], references: [id])
  collectorId     Int?
  collector       User?         @relation(fields: [collectorId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Appointment {
  id              Int       @id @default(autoincrement())
  appointmentDate DateTime
  status          String
  donorId         Int
  donor           Donor     @relation(fields: [donorId], references: [id])
}

model Qualification {
  id                    Int       @id @default(autoincrement())
  donorId               Int       // Foreign key to Donor
  donor                 Donor     @relation("DonorQualification", fields: [donorId], references: [id])
  weight                Float
  pulse                 Int
  hb                    Float
  bp                    String
  temperature           Float
  lastDonationDate      DateTime?
  hasDonatedBefore      Boolean
  hasTattooing          Boolean
  hasEarPiercing        Boolean
  hadDentalExtraction   Boolean
  hasHeartDisease       Boolean
  hasCancer             Boolean
  hasDiabetes           Boolean
  hasHepatitis          Boolean
  hasSTD                Boolean
  hadTyphoidLastYear    Boolean
  hasLungDisease        Boolean
  hasTuberculosis       Boolean
  hasAllergies          Boolean
  hasKidneyDisease      Boolean
  hasEpilepsy           Boolean
  hasAbnormalBleeding   Boolean
  hadJaundiceLastYear   Boolean
  hadMalariaSixMonths   Boolean
  hasFaintingSpells     Boolean
  takenAntibiotics      Boolean
  takenSteroids         Boolean
  takenAspirin          Boolean
  hadVaccinations       Boolean
  consumedAlcohol       Boolean
  hadDogBiteVaccine     Boolean
  hadSurgeryLastSixMonths Boolean
  hadBloodTransfusionLastSixMonths Boolean
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}



model Integration {
  id            Int          @id @default(autoincrement())
  hospitalId    Int
  hospital      Hospital     @relation(fields: [hospitalId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Notification {
  id          Int         @id @default(autoincrement())
  content     String
  sendDate    DateTime     @default(now())
  donorId     Int?
  donor       Donor?       @relation(fields: [donorId], references: [id])
  hospitalId  Int?
  hospital    Hospital?    @relation(fields: [hospitalId], references: [id])
  userId      Int?
  user        User?        @relation(fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Order {
  id          Int          @id @default(autoincrement())
  orderDate   DateTime
  bloodType   BloodType
  quantity    Int
  status      OrderStatus
  hospitalId  Int
  hospital    Hospital      @relation(fields: [hospitalId], references: [id])
}

model Report {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  generatedBy Int
  user        User      @relation(fields: [generatedBy], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
